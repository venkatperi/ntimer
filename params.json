{
  "name": "Ntimer",
  "tagline": "An event firing, repeatable, cancellable timer for nodejs.",
  "body": "# ntimer\r\nAn event firing, repeatable, cancellable timer for `nodejs`.\r\n\r\n[![Build Status](https://travis-ci.org/venkatperi/ntimer.svg?branch=master)](https://travis-ci.org/venkatperi/ntimer)\r\n\r\n---\r\n\r\n## Installation\r\n\r\nInstall with npm\r\n\r\n```shell\r\nnpm install ntimer\r\n```\r\n\r\n***\r\n\r\n## Examples\r\n### Just a Timer\r\n\r\n```coffeescript\r\nntimer = require 'ntimer'\r\n\r\nntimer('foo', '2s')\r\n.on \"done\", -> # do something\r\n.start()\r\n```\r\n\r\n### Auto Start\r\n\r\n```coffeescript\r\nntimer.auto('foo', '2s')\r\n.on \"done\", -> # do something\r\n```\r\n\r\n### Cancel Timer\r\n\r\n```coffeescript\r\nt = ntimer.auto('foo', '5s')\r\n.on \"done\", -> # do something\r\n.on \"cancelled\", -> # why, oh why?\r\n\r\n# start another timer to cancel the above before it fires\r\nsetTimeout ( -> t.cancel()), 500\r\n```\r\n### Repeat\r\n\r\n```coffeescript\r\nntimer.repeat('foo', '500ms')\r\n.on \"timer\", (name, count) -> # fired every 500ms\r\n.start()\r\n```\r\n### Limited Repeat\r\n\r\n```coffeescript\r\nntimer.repeat('foo', '500ms', 5)\r\n.on \"timer\", (name, count) -> # fired every 500ms, five times\r\n.on \"done\", -> # fired after the fifth 'timer' event\r\n.start()\r\n```\r\n---\r\n\r\n## API\r\n\r\n### Create Timers\r\n\r\n#### ntimer(name, timeout)\r\n#### ntimer.auto(name, timeout)\r\n\r\nCreates a single shot, restartable timer. `ntimer.auto` creates an auto starting timer.\r\n\r\n* **name** `{String}` is returned as the first argument of events.\r\n* **timeout** can be a `{Number}` in `milliseconds` or a `{String}`. See [format](https://github.com/unshiftio/millisecond). \r\n\r\n#### ntimer.repeat(name, timeout[, maxRepeaet])\r\n#### ntimer.autoRepeat(name, timeout[, maxRepeat])\r\n\r\nCreates a repeating timer. `ntimer.auto` creates an auto starting version.\r\n\r\n* **name** `{String}` is returned as the first argument of events.\r\n* **timeout** can be a `{Number}` in `milliseconds` or a `{String}`. See [format](https://github.com/unshiftio/millisecond). \r\n* **maxRepeat** an optional `{Number}` specifies the maximum repeat count. \r\n\r\n---\r\n\r\n### Properties\r\n\r\n#### timer.count\r\n\r\nThe `{Number}` of times the repeating timer has already fired.\r\n\r\n#### timer.running\r\n\r\nA `{Boolean}` indicating whether the timer is currently running.\r\n\r\n---\r\n\r\n### Methods\r\n\r\n#### timer.start()\r\nStart a timer. No-op if already started. Returns the timer object for chaining.\r\n\r\n#### timer.cancel()\r\nCancels a running timer. No-op if not started or already stopped/cancelled. Returns the timer object for chaining.\r\n\r\n---\r\n\r\n### Events\r\n\r\n#### on(\"started\", cb(name))\r\n\r\nFired when the timer is started (or restarted).\r\n\r\n#### on(\"cancelled\", cb(name))\r\n\r\nFired when the timer is cancelled.\r\n\r\n#### on(\"done\", cb(name))\r\n\r\nFired when the timer is done (not cancelled).\r\n\r\n#### on(\"timer\", cb(name, count))\r\n\r\nFired for each `timeout` interval,  once for single shot timers, or repeatdly for repeating timers.\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}